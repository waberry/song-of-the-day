generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Track {
  id                String        @id
  name              String
  duration          Int
  popularity        Int?
  previewUrl        String?
  spotifyUrl        String
  albumId           String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  available_markets String[]
  disc_number       Int?
  explicit          Boolean?
  is_local          Boolean?
  track_number      Int?
  type              String?
  DailySong         DailySong?
  album             Album         @relation(fields: [albumId], references: [id])
  artists           TrackArtist[]
  release_date      DateTime
}

model Album {
  id                     String       @id
  name                   String
  release_date           String?
  imageUrl               String?
  spotifyUrl             String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  release_date_precision String?
  total_tracks           Int?
  type                   String?
  images                 AlbumImage[]
  tracks                 Track[]
}

model Artist {
  id         String        @id
  name       String
  spotifyUrl String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  followers  Int?
  genres     String[]
  popularity Int?
  type       String?
  images     ArtistImage[]
  tracks     TrackArtist[]
}

model TrackArtist {
  trackId  String
  artistId String
  artist   Artist @relation(fields: [artistId], references: [id])
  track    Track  @relation(fields: [trackId], references: [id])

  @@id([trackId, artistId])
}

model AlbumImage {
  albumId String
  url     String
  height  Int?
  width   Int?
  album   Album  @relation(fields: [albumId], references: [id])

  @@id([albumId, url])
}

model ArtistImage {
  artistId String
  url      String
  height   Int?
  width    Int?
  artist   Artist @relation(fields: [artistId], references: [id])

  @@id([artistId, url])
}

model DailySong {
  id           String   @id @default(uuid())
  trackId      String   @unique
  selectedDate DateTime @unique @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  track        Track    @relation(fields: [trackId], references: [id])
}

model CommonGameState {
  id            Int       @id @default(autoincrement())
  lastResetDate DateTime?
}

model GameState {
  dailySongFound  Boolean
  guessState      Json
  lastResetDate   DateTime
  anonymousUserId String
  userId          String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  id              Int      @id @default(autoincrement())
  pickedSongs     Json[]
  user            User?    @relation(fields: [userId], references: [id])

  @@index([anonymousUserId])
}

model History {
  id            String   @id
  name          String
  imageUrl      String
  albumName     String
  spotifyUrl    String
  artists       String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  playedAt      DateTime @unique
  spotifyUserId String

  @@index([spotifyUserId, playedAt])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  spotifyId     String?    @unique
  gameStateId   String?
  accounts      Account[]
  GameState     GameState?
  posts         Post[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
