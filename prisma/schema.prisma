// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Song {
  id            Int      @id @default(autoincrement())
  spotifyId     String   @unique // Spotify ID as unique identifier
  title         String
  artist        String
  album         String
  durationMs    Int      // Song duration in milliseconds
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  dailySongs    DailySong[] // Relationship to DailySong
  guesses       Guess[]     // Relationship to guesses
}

model DailySong {
  id         Int      @id @default(autoincrement())
  dayId      Int
  songId     Int
  modeId     Int
  day        Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  mode       Mode     @relation(fields: [modeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Guess {
  id            Int      @id @default(autoincrement())
  date          DateTime @default(now())
  userId        Int
  modeId        Int
  songId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mode          Mode     @relation(fields: [modeId], references: [id], onDelete: Cascade)
  song          Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  success       Boolean
  diff          Json
  createdAt     DateTime @default(now())
}

model Day {
  id           Int        @id @default(autoincrement())
  date         DateTime   @unique @default(now())
  seed         String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dailySongs   DailySong[] // Relationship to DailySong
}

model Mode {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  playlistId   String
  guesses      Guess[]    // One-to-many relationship with Guess
  dailySongs   DailySong[] // Relationship to DailySong
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model User {
  id              Int     @id @default(autoincrement())
  anonymousUserId String  @unique
  guesses         Guess[] // Opposite relation field
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
