{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/berry/Development/song-of-the-day/src/app/_components/modes.tsx"],"sourcesContent":["\"use client\";\n\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\nimport { api } from \"~/trpc/react\";\n\nimport { Card, CardContent } from \"@/components/ui/card\"\n\nimport { Headphones, Zap } from \"lucide-react\"\n\nexport function Modes() {\n  const [modes] = api.mode.getModes.useSuspenseQuery();\n  const queryClient = useQueryClient(); // Initialize the query client\n\n  const [playlistId, setPlaylistId] = useState(\"\");\n  const createMode = api.mode.createMode.useMutation({\n    onSettled(data, error, variables, context) {\n      queryClient.invalidateQueries('getModes'); // Invalidate the query\n    }\n  });\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardContent className=\"flex flex-col items-center space-y-4 p-6\">\n            <Headphones className=\"h-12 w-12 text-purple-600 dark:text-purple-400\" />\n            <h2 className=\"text-2xl font-bold\">Classic Mode</h2>\n            <p className=\"text-center text-gray-600 dark:text-gray-300\">\n              Guess the song from a short audio clip. Test your ear for music!\n            </p>\n            <Button>Play Classic</Button>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex flex-col items-center space-y-4 p-6\">\n            <Zap className=\"h-12 w-12 text-yellow-500\" />\n            <h2 className=\"text-2xl font-bold\">Lightning Round</h2>\n            <p className=\"text-center text-gray-600 dark:text-gray-300\">\n              Rapid-fire questions. How many can you answer in 60 seconds?\n            </p>\n            <Button>Start Lightning Round</Button>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex flex-col items-center space-y-4 p-6\">\n            <Award className=\"h-12 w-12 text-green-500\" />\n            <h2 className=\"text-2xl font-bold\">Genre Master</h2>\n            <p className=\"text-center text-gray-600 dark:text-gray-300\">\n              Specialized quizzes for different music genres. Prove your expertise!\n            </p>\n            <Button>Choose Genre</Button>\n          </CardContent>\n        </Card>\n      </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAEA;AAEA;AALA;AAOA;AAAA;AATA;;;;;;;AAWO,SAAS;IACd,MAAM,CAAC,MAAM,GAAG,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB;IAClD,MAAM,cAAc,CAAA,GAAA,sLAAA,CAAA,iBAAc,AAAD,KAAK,8BAA8B;IAEpE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,aAAa,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QACjD,WAAU,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO;YACvC,YAAY,iBAAiB,CAAC,aAAa,uBAAuB;QACpE;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACX,8OAAC,gIAAA,CAAA,OAAI;0BACH,cAAA,8OAAC,gIAAA,CAAA,cAAW;oBAAC,WAAU;;sCACrB,8OAAC,8MAAA,CAAA,aAAU;4BAAC,WAAU;;;;;;sCACtB,8OAAC;4BAAG,WAAU;sCAAqB;;;;;;sCACnC,8OAAC;4BAAE,WAAU;sCAA+C;;;;;;sCAG5D,8OAAC;sCAAO;;;;;;;;;;;;;;;;;0BAGZ,8OAAC,gIAAA,CAAA,OAAI;0BACH,cAAA,8OAAC,gIAAA,CAAA,cAAW;oBAAC,WAAU;;sCACrB,8OAAC,gMAAA,CAAA,MAAG;4BAAC,WAAU;;;;;;sCACf,8OAAC;4BAAG,WAAU;sCAAqB;;;;;;sCACnC,8OAAC;4BAAE,WAAU;sCAA+C;;;;;;sCAG5D,8OAAC;sCAAO;;;;;;;;;;;;;;;;;0BAGZ,8OAAC,gIAAA,CAAA,OAAI;0BACH,cAAA,8OAAC,gIAAA,CAAA,cAAW;oBAAC,WAAU;;sCACrB,8OAAC;4BAAM,WAAU;;;;;;sCACjB,8OAAC;4BAAG,WAAU;sCAAqB;;;;;;sCACnC,8OAAC;4BAAE,WAAU;sCAA+C;;;;;;sCAG5D,8OAAC;sCAAO;;;;;;;;;;;;;;;;;;;;;;;AAKpB"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///home/berry/Development/song-of-the-day/node_modules/%40tanstack/react-query/src/HydrationBoundary.tsx"],"sourcesContent":["/* eslint-disable react-compiler/react-compiler */\n\n'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  OmitKeyof,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: OmitKeyof<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: OmitKeyof<\n      Exclude<HydrateOptions['defaultOptions'], undefined>,\n      'mutations'\n    >\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n            existingQuery.state.dataUpdatedAt\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n"],"names":[],"mappings":";;;;AAGA,YAAY,WAAW;AAGvB,SAAS,sBAAsB;AAD/B,SAAS,eAAe;;;;;AAqBjB,IAAM,oBAAoB,CAAC,EAChC,QAAA,EACA,UAAU,CAAC,CAAA,EACX,KAAA,EACA,WAAA,EACF,KAA8B;IAC5B,MAAM,mMAAS,kBAAA,EAAe,WAAW;IACzC,MAAM,CAAC,gBAAgB,iBAAiB,CAAA,GAAU,sMAAA,QAAA,CAEhD;IAEF,MAAM,aAAmB,sMAAA,MAAA,CAAO,OAAO;IACvC,WAAW,OAAA,GAAU;IAiBf,sMAAA,OAAA,CAAQ,MAAM;QAClB,IAAI,OAAO;YACT,IAAI,OAAO,UAAU,UAAU;gBAC7B;YACF;YAEA,MAAM,aAAa,OAAO,aAAA,CAAc;YAExC,MAAM,UAAW,MAA0B,OAAA,IAAW,CAAC,CAAA;YAEvD,MAAM,aAAyC,CAAC,CAAA;YAChD,MAAM,kBAA8C,CAAC,CAAA;YACrD,KAAA,MAAW,mBAAmB,QAAS;gBACrC,MAAM,gBAAgB,WAAW,GAAA,CAAI,gBAAgB,SAAS;gBAE9D,IAAI,CAAC,eAAe;oBAClB,WAAW,IAAA,CAAK,eAAe;gBACjC,OAAO;oBACL,MAAM,mBACJ,gBAAgB,KAAA,CAAM,aAAA,GACtB,cAAc,KAAA,CAAM,aAAA;oBACtB,MAAM,qBAAqB,gBAAgB,KACzC,CAAC,QAAU,MAAM,SAAA,KAAc,gBAAgB,SAAA;oBAGjD,IACE,oBAAA,CACC,CAAC,sBACA,gBAAgB,KAAA,CAAM,aAAA,GACpB,mBAAmB,KAAA,CAAM,aAAA,GAC7B;wBACA,gBAAgB,IAAA,CAAK,eAAe;oBACtC;gBACF;YACF;YAEA,IAAI,WAAW,MAAA,GAAS,GAAG;gBAGzB,CAAA,GAAA,2KAAA,CAAA,UAAA,EAAQ,QAAQ;oBAAE,SAAS;gBAAW,GAAG,WAAW,OAAO;YAC7D;YACA,IAAI,gBAAgB,MAAA,GAAS,GAAG;gBAC9B,kBAAkB,CAAC,OACjB,OAAO,CAAC;2BAAG,MAAM;2BAAG,eAAe;qBAAA,GAAI;YAE3C;QACF;IACF,GAAG;QAAC;QAAQ;QAAgB,KAAK;KAAC;IAE5B,sMAAA,SAAA,CAAU,MAAM;QACpB,IAAI,gBAAgB;YAClB,CAAA,GAAA,2KAAA,CAAA,UAAA,EAAQ,QAAQ;gBAAE,SAAS;YAAe,GAAG,WAAW,OAAO;YAC/D,kBAAkB,KAAA,CAAS;QAC7B;IACF,GAAG;QAAC;QAAQ,cAAc;KAAC;IAE3B,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}